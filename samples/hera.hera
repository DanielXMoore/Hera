Grammar
  EOS* Rule+ ->
    return Object.fromEntries($2)

Rule
  Name EOS RuleBody -> [$1, $3]

RuleBody
  ( Indent Choice )+ ->
    var r = $1.map((a) => a[1])
    if (r.length === 1) return r[0];
    return ["/", r]

Choice
  Sequence Handling ->
    if ($2 !== undefined) {
      if (!$1.push)
        $1 = ["S", [$1], $2]
      else
        $1.push($2)
    }
    return $1

Sequence
  Expression SequenceExpression+ ->
    $2.unshift($1)
    return ["S", $2]
  Expression ChoiceExpression+ ->
    $2.unshift($1)
    return ["/", $2]
  Expression

SequenceExpression
  Space Expression -> $2

ChoiceExpression
  Space "/" Space Expression -> $4

Expression
  PrefixOperator? Suffix ->
    if ($1) return [$1, $2]
    else return $2

PrefixOperator
  [$&!]

Suffix
  Primary SuffixOperator? ->
    if ($2) return [$2, $1]
    else return $1

SuffixOperator
  [+?*]

Primary
  Name
  Literal
  OpenParenthesis Sequence CloseParenthesis -> $2

Literal
  StringLiteral
  RegExpLiteral

Handling
  EOS ->
    return undefined
  Space* Arrow HandlingExpression -> $3

HandlingExpression
  EOS HandlingExpressionBody -> $2
  StructuralMapping EOS -> $1

HandlingExpressionBody
  HandlingExpressionLine+ ->
    return {
      f: $1.join("\n")
    }

HandlingExpressionLine
  Indent Indent [^\n\r]* EOS -> $3

StructuralMapping
  StringValue
  NumberValue
  Variable
  BooleanValue
  NullValue
  OpenBracket StructuralMapping CommaThenValue* CloseBracket ->
    $3.unshift($2); return $3

CommaThenValue
  Space* "," Space* StructuralMapping Space* -> $4

Variable
  /\$(\d)/ ->
    return {v: parseInt($1, 10)}

BooleanValue
  "true" ->
    return true
  "false" ->
    return false

NullValue
  "null" ->
    return null
  "undefined" ->
    return undefined

NumberValue
  /0x[\da-fA-F]+/ ->
    return parseInt($0, 16)
  /\d+(\.\d+)?/ ->
    return parseInt($0, 10)

StringValue
  "\"" $DoubleStringCharacter* "\"" -> $2

DoubleStringCharacter
  [^"\\]+
  EscapeSequence

EscapeSequence
  $( Backslash . )

StringLiteral
  StringValue -> ["L", $1]

RegExpLiteral
  "/" !Space $RegExpCharacter* "/" -> ["R", $3]
  $CharacterClassExpression -> ["R", $1]
  "." -> ["R", $1]

CharacterClassExpression
  CharacterClass+

RegExpCharacter
  [^\/\\]+
  EscapeSequence

CharacterClass
  "[" CharacterClassCharacter* "]" Quantifier?

CharacterClassCharacter
  [^\]\\]+
  EscapeSequence

Quantifier
  /[?+*]|\{\d+(,\d+)?\}/

Name
  [_a-zA-Z][_a-zA-Z0-9]*

Arrow
  "->" Space*

Backslash
  "\\"

OpenBracket
  /\[[ \t]*/

CloseBracket
  /\][ \t]*/

OpenParenthesis
  /\([ \t]*/

CloseParenthesis
  /[ \t]*\)/

Indent
  "  "

Space
  [ \t]+

EOS
  /([ \t]*(#[^\n\r]*)?(\n|\r\n|\r|$))+/
