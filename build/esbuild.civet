esbuild from esbuild
civetPlugin from @danielx/civet/esbuild
//@ts-expect-error
heraPlugin from @danielx/hera-previous/esbuild

watch := process.argv.includes '--watch'
minify := process.argv.includes '--minify'
sourcemap := false

esbuild.build({
  entryPoints: ['source/main.civet']
  bundle: true
  keepNames: true
  external: ["fs"]
  format: "cjs"
  sourcemap
  minify
  watch
  platform: 'node'
  outdir: 'dist/'
  plugins: [
    heraPlugin
      loader: 'ts'
    civetPlugin
      ts: "civet"
      emitDeclaration: true
  ]
}).catch -> process.exit 1

esbuild.build({
  entryPoints: ['source/cli.civet']
  bundle: false
  format: "cjs"
  sourcemap
  minify
  watch
  platform: 'node'
  outfile: 'dist/hera'
  plugins: [
    civetPlugin
      ts: "civet"
  ]
}).catch -> process.exit 1

esbuild.build {
  entryPoints: ["source/esbuild.civet"]
  format: "cjs"
  bundle: false
  platform: 'node'
  outdir: 'dist/'
  outbase: 'source/'
  plugins: [
    civetPlugin
      ts: "civet"
      emitDeclaration: true
  ]
  footer: {
    // Rewrite default export as CJS exports object
    // so require('@danielx/hera/esbuild') provides the plugin as the default export
    js: 'module.exports = module.exports.default;'
  }
}

esbuild.build {
  entryPoints: [
    "source/esm.civet"
    "source/hera-types.civet"
    "source/register.civet"
    "source/register/cjs.civet"
    "source/register/tsc/cjs.civet"
    "source/register/tsc/esm.civet"
    "source/register/tsc/index.civet"
    "source/register/tsc/transpile.civet"
  ]
  format: "cjs"
  bundle: false
  platform: 'node'
  outdir: 'dist/'
  outbase: 'source/'
  plugins: [
    civetPlugin
      ts: "civet"
      emitDeclaration: true
  ]
}
