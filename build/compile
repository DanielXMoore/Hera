#!/bin/bash
set -euox pipefail
shopt -s globstar

rm -rf dist
mkdir dist
./node_modules/.bin/esbuild source/machine.ts --outfile=source/machine.js --bundle --platform=node
cp source/machine.* dist/
civet build/esbuild.civet

# Cross-platform version of `sed -i`
# Assumes that the last parameter is the file being modified
#
# Usage:
#   sed_i -e '/import_meta/d' -e '/import_module/d' dist/main.js
#     is equivalent to
#   sed -i '' -e '/import_meta/d' -e '/import_module/d' dist/main.js
#
# Why? GNU and BSD sed don't both support -i in the same way.
# See: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux
function sed_i() {
  # Make a backup of the file with .bak as the extension
  sed -i.bak "$@"

  # Remove the backup file. Assumes the last parameter is the file being modified.
  rm "${@: -1}.bak"
}

# adjust .d.ts files
for f in dist/**/*.civet.d.ts; do
  # replace all .civet imports with .js
  sed_i 's/\.civet"/.js"/g' "$f"

  mv "$f" "${f%.civet.d.ts}.d.ts"
done

# hack to rewrite require extension
sed_i -e 's/main.civet/main.js/' dist/hera

# hack to remove import_meta and just use existing require
sed_i -e '/import_meta/d' -e '/import_module/d' -e 's/require2/require/' dist/main.js

# Mark 'hera' cli as executable
chmod +x dist/hera

# Compressed size check
size=$(gzip - < dist/main.js | wc -c)
MAX_SIZE=14000

if [ "${size}" -gt $MAX_SIZE ]; then
  echo "Size check failed: ${size} > $MAX_SIZE bytes"
  exit 1
else
  echo "Size check passed: ${size} < $MAX_SIZE bytes"
fi

cp source/esm.mjs dist/
