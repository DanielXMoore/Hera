// Compile a rules json to typescript

import type { HeraAST, HeraRules, StructuralHandling } from ./hera-types.ts

export type CompilerOptions = {
  filename?: string
  inlineMap?: boolean
  sourceMap?: boolean
  source?: string
  types?: boolean
  libPath?: string | undefined
  module?: boolean
}

strDefs: string[] := []
reDefs: string[] := []

/**
Define a literal string terminal
*/
defineTerminal := (lit: string) ->
  index := strDefs.indexOf(lit)
  let id

  if index >= 0
    id = `$L${index}`
  else
    id = `$L${strDefs.length}`
    strDefs.push lit

  return id

/**
Define a RegExp terminal
*/
defineRe := (re: string) ->
  index := reDefs.indexOf(re)
  let id

  if index >= 0
    id = `$R${index}`
  else
    id = `$R${reDefs.length}`
    reDefs.push re

  return id

/**
Pretty print a string or RegExp literal
*/
prettyPrint := (name: string, terminal: string, re?: boolean) ->
  let pv
  if re
    pv = `/${terminal}/`
  else
    pv = JSON.stringify(terminal)

  return `${name} ${pv}`

/**
* Compile an operator to a JS or TS string.
*/
compileOp := (tuple: HeraAST, name: string, defaultHandler: boolean, types?: boolean): string ->
  // TODO: should nested levels have default handler set to true? (only comes into play on regexps)
  if Array.isArray(tuple)
    switch tuple[0]
      when "L"
        {
          args := tuple[1]
          `$EXPECT(${defineTerminal(args)}, ${JSON.stringify(prettyPrint(name, args))})`
        }
      when "R"
        {
          args := tuple[1]
          let f = `$EXPECT(${defineRe(args)}, ${JSON.stringify(prettyPrint(name, args, true))})`
          if defaultHandler
            f =`$R$0(${f})${reType(types, args)}`

          f
        }
      when "/"
        {
          src := tuple[1].map (arg) ->
            compileOp(arg, name, defaultHandler, types)
          .join(", ")

          `$C(${src})`
        }
      when "S"
        {
          src := tuple[1].map (arg) ->
            compileOp(arg, name, defaultHandler, types)
          .join(", ")
          `$S(${src})`
        }
      when "*"
        `$Q(${compileOp(tuple[1], name, defaultHandler, types)})`
      when "+"
        `$P(${compileOp(tuple[1], name, defaultHandler, types)})`
      when "?"
        `$E(${compileOp(tuple[1], name, defaultHandler, types)})`
      when "$"
        // Inside text can ignore all handlers since they are disregarded anyway
        `$TEXT(${compileOp(tuple[1], name, false, types)})`
      when "&"
        `$Y(${compileOp(tuple[1], name, defaultHandler, types)})`
      when "!"
        `$N(${compileOp(tuple[1], name, defaultHandler, types)})`
      default
        if tuple[0].name
          compileOp(tuple[1], name, defaultHandler, types)
        else
          throw new Error `Unknown op: ${tuple[0]} ${JSON.stringify(tuple[1])}`
  else // rule reference
    tuple

// Only rules have handlers, either one per choice line,
// or one for the whole deal

regExpHandlerParams := ["$skip", "$loc", "$0", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9"]
regularHandlerParams := ["$skip", "$loc", "$0", "$1"]

// Offset is so sequences start at the first item in the array
// and regexps start at the second because the first is the entire match
// TODO: is 0 valid to select the entire sequence result?
// TODO: remove offset and unify handlings
compileStructuralHandler := (mapping: StructuralHandling, source: any, single=false, offset=-1): string ->
  switch typeof mapping
    when "string"
      JSON.stringify(mapping)
    when "object"
      if Array.isArray mapping
        `[${mapping.map((m) => compileStructuralHandler(m, source, single, offset)).join(', ')}]`
      else if mapping is null
        "null"
      else if "l" in mapping
        String(mapping.l)
      else if "v" in mapping
        if single
          source
        else
          if typeof mapping.v is 'number'
            n := mapping.v+offset
            if n is -1 // Handle $0
              source
            else // Handle $1, $2, etc.
              `${source}[${n}]`
          else
            mapping.v
      else if "o" in mapping
        o := mapping.o
        "{" + Object.keys(o).map (key) ->
          `${JSON.stringify(key)}: ${compileStructuralHandler(o[key], source, single, offset)}`
        .join(", ") + "}"
      else
        throw new Error "unknown object mapping"
    default // number, boolean, undefined
      String(mapping)

compileHandler := (options: CompilerOptions, arg: HeraAST, name: string) ->
  if typeof arg is "string"
    return arg // reference to other named parser function

  if arg.length is 3
    h := arg[2]
    if h and typeof h is "object" and "f" in h // function mapping
      parser := compileOp(arg, name, false, options.types)

      handler :=
        $loc: h.$loc
        token: h.f
        offset: 4

      /* c8 ignore next */
      handlerType := options.types && h.t ? `: ${h.t}` : ""

      if arg[0] is "S"
        // Gather names from each element in arg[1]
        // Only handle top level names for now
        // TODO: transform based on structure, walk AST tree to gather named parameters and mappings based on structural location
        namedParameters := arg[1].map (node, i) ->
          getParameterDeclaration(node, i+1)
        .join("")

        parameters := ["$skip", "$loc", "$0"].concat arg[1].map (_, i) => `$${i+1}`

        return [
          `$TS(${parser}, function(${parameters.join(", ")})${handlerType} {\n`
          namedParameters
          "\n"
          handler
          "\n});"
        ]

      else if arg[0] is "R"
        // NOTE: RegExp named groups may go here later
        return [
          `$TR(${parser}, function(${regExpHandlerParams.join(", ")})${handlerType} {\n`
          handler
          `\n});`
        ]
      else
        namedParameters := getParameterDeclaration(arg, 0)

        return [
          `$TV(${parser}, function(${regularHandlerParams.join(", ")})${handlerType} {\n`
          namedParameters
          "\n"
          handler
          "\n});"
        ]

    else // structural mapping
      parser := compileOp(arg, name, false, options.types)
      if arg[0] is "S"
        namedParameters := arg[1].map (node, i) ->
          varName := getNamedVariable(node[0])
          if varName
            `var ${varName} = value[${i}];`
          else
            ""
        .join("")
        return `$T(${parser}, function(value) {${namedParameters}return ${compileStructuralHandler(h, "value")} });`
      else if arg[0] is "R"
        return `$T(${parser}, function(value) { return ${compileStructuralHandler(h, "value", false, 0)} });`
      else
        // This is 'single' so if there is a named variable it comes out as 'value'
        return `$T(${parser}, function(value) { return ${compileStructuralHandler(h, "value", true)} });`

  return compileOp(arg, name, true, options.types)

compileRule := (options: CompilerOptions, name: string, rule: HeraAST) ->
  { types } := options
  stateType := types ? ": ParseState" : ""
  ctxType := types ? ": ParserContext" : ""

  // first level choice may have nested handlings
  if typeof rule is "string" or !(rule[0] is "/" and !rule[2])
    body := `$EVENT(ctx, state, ${JSON.stringify(name)}, ${name}$0)`

    [
      `//@ts-ignore\nconst ${name}$0 = `,
      // NOTE: This can return an array so we can't just jam it into the template string
      compileHandler(options, rule, name), "\n",
      `//@ts-ignore\nfunction ${name}(ctx${ctxType}, state${stateType}) { return ${body} }`
    ]
  else
    args := rule[1]
    fns := args.map (arg, i) ->
      [`//@ts-ignore\nconst ${name}$${i} = `, compileHandler(options, arg, name), "\n"]

    choices := args.map (_, i) ->
      `${name}$${i}`

    choicesDec := `//@ts-ignore\nconst ${name}$$ = [${choices.join(",")}]\n`
    body := `$EVENT_C(ctx, state, ${JSON.stringify(name)}, ${name}$$)`

    [
      ...fns
      choicesDec
      `//@ts-ignore\nfunction ${name}(ctx${ctxType}, state${stateType}) { return ${body} }`
    ]

compileRulesObject := (ruleNames: string[]) ->
  meat := ruleNames.map (name) ->
    `${name}: ${name}`
  .join(",\n")

  return `{
    ${meat}
  }`

compileExports := (ruleNames: string[], module: boolean) ->
  if module
    meat := ruleNames.map (name) ->
      `  ${name}`
    .join(",\n")

    return `export {\n${meat}\n}`

  return ruleNames.map (name) ->
      `exports.${name} = ${name};`
    .join("\n")

/**
Get a JS declaration string for nodes that have named parameters.
*/
getParameterDeclaration := (node: HeraAST, i: number) ->
  name := getNamedVariable node[0]

  if name
    `var ${name} = $${i};`
  else
    ""

/**
Get a JS declaration string for nodes that have named parameters.
*/
getNamedVariable := (op: HeraAST[0]): string | undefined ->
  if typeof op is "object" and "name" in op
    return op.name
  return undefined

defaultOptions: CompilerOptions :=
  filename: "anonymous"
  inlineMap: false
  sourceMap: false
  source: ""
  types: false
  libPath: "@danielx/hera/lib"

{ SourceMap, base64Encode } from ./sourcemap.civet

export function compile(rules: HeraRules, options: CompilerOptions & { sourceMap: true }): { code: string, sourceMap: ReturnType<typeof SourceMap> }
export function compile(rules: HeraRules, maybeOptions?: CompilerOptions): string
export function compile(rules: HeraRules, maybeOptions?: CompilerOptions): string | { code: string, sourceMap: ReturnType<typeof SourceMap> }
  options := { ...defaultOptions, ...maybeOptions }

  strDefs.length = 0
  reDefs.length = 0

  { types, module } := options
  /* c8 ignore next */
  libPath := options.libPath or defaultOptions.libPath
  ruleNames := Object.keys(rules)

  body := ruleNames.flatMap (name) ->
    [ compileRule(options, name, rules[name]), "\n\n"]

  strDefSource := strDefs.map (str, i) ->
    `const $L${i} = $L("${str}");\n`

  reDefSource := reDefs.map (r, i) ->
    `const $R${i} = $R(new RegExp(${JSON.stringify(r)}, 'suy'));\n`

  genOpts: GenerateOptions := {}

  let sm: ReturnType<typeof SourceMap> | undefined
  if options.inlineMap or options.sourceMap
    /* c8 ignore next */
    unless options.source
      /* c8 ignore next */
      throw new Error "sourceMap requires source"

    sm = SourceMap(options.source)
    genOpts.updateSourceMap = sm.updateSourceMap

  head := (types ? tsHead : module ? mjsHead : cjsHead).replace("\"./machine.js\"", JSON.stringify(libPath))
  tail := types ? tsTail : jsTail
  exp := (module ? mjsExport : cjsExport)

  code := generate [
    head
    `\n\nconst grammar = ${compileRulesObject(ruleNames)};\n\n`
    strDefSource
    "\n\n"
    reDefSource
    "\n\n"
    body
    "\n\n"
    tail
    "\n\n"
    exp
    "\n\n"
    compileExports(ruleNames, !!module)
    "\n\n"
    //@ts-ignore
    rules[Symbol.for("code")]
  ], genOpts

  if options.inlineMap
    srcMapJSON := sm!.json(options.filename!, "")
    // NOTE: separate comment to prevent this string getting picked up as actual sourceMappingURL in tools
    return `${code}\n${"//#"} sourceMappingURL=data:application/json;base64,${base64Encode JSON.stringify(srcMapJSON)}\n`
  else if options.sourceMap
    return { code, sourceMap: sm! }

  return code

isSimple := /^[^.*+?{}()\[\]^\\]*$/
isSimpleCharacterClass := /^\[[^-^\\]*\]$/

/**
Generate a more specific TypeScript type for Regular expressions that consist of
limited productions. Returns an empty string if `types` is `false`.
*/
reType := (types: boolean | undefined, str: string) ->
  if types
    let specifics: string[] | undefined
    if str.match(isSimple)
      specifics = str.split("|").map (s) ->
        JSON.stringify(s)
    else if str.match(isSimpleCharacterClass)
      specifics = str.substring(1, str.length-1).split("").map (s) ->
        JSON.stringify(s)

    if specifics
      ` as Parser<${specifics.join("|")}>`
    else
      ""
  else
    ""

type ASTNode = string | ASTNode[] | { $loc: { pos: number }, token: string, offset?: number } | { children: ASTNode[] } | undefined
type GenerateOptions = {
  updateSourceMap?: (outputStr: string, inputPos?: number, offset?: number) => void
}
generate := (node: ASTNode, options: GenerateOptions): string ->
  if !node return ""

  if typeof node is "string"
    // increment output line/column
    options.updateSourceMap? node

    return node

  if Array.isArray(node)
    return node.map (child) ->
      generate child, options
    .join('')

  if typeof node is "object"
    if "$loc" in node
      {token, $loc, offset} := node
      options.updateSourceMap?(token, $loc.pos, offset)
      return token
    /* c8 ignore next */
    return generate node.children, options
  /* c8 ignore next */
  throw new Error "unknown node type"

cjsHead := """
  const {
    $C,
    $E,
    $EVENT,
    $EVENT_C,
    $EXPECT,
    $L,
    $N,
    $P,
    $Q,
    $R,
    $R$0,
    $S,
    $T,
    $TEXT,
    $TR,
    $TS,
    $TV,
    $Y,
    ParseError,
    Parser,
    Validator
  } = require("./machine.js")

"""

jsTail := """
  const parser = (function() {
    const { fail, validate, reset } = Validator()
    let ctx = { expectation: "", fail }

    return {
      parse: (input, options = {}) => {
        if (typeof input !== "string") throw new Error("Input must be a string")

        const parser = (options.startRule != null)
          ? grammar[options.startRule]
          : Object.values(grammar)[0]

        if (!parser) throw new Error(`Could not find rule with name '${options.startRule}'`)

        const filename = options.filename || "<anonymous>";

        reset()
        Object.assign(ctx, { ...options.events, tokenize: options.tokenize });

        return validate(input, parser(ctx, {
          input,
          pos: 0,
        }), {
          filename: filename
        })
      }
    }
  }())
"""

cjsExport := """
  exports.default = parser
  const parse = exports.parse = parser.parse
"""

mjsHead := """
  import {
    $C,
    $E,
    $EVENT,
    $EVENT_C,
    $EXPECT,
    $L,
    $N,
    $P,
    $Q,
    $R,
    $R$0,
    $S,
    $T,
    $TEXT,
    $TR,
    $TS,
    $TV,
    $Y,
    ParseError,
    Validator,
  } from "./machine.js"

"""

tsHead := mjsHead.replace("}", """
  type ParserContext,
  type ParseState,
}
""")

tsTail := """
  const parser = (function() {
    const { fail, validate, reset } = Validator()
    let ctx: ParserContext = { expectation: "", fail }

    return {
      parse: (input: string, options: ParserOptions<typeof grammar> = {}) => {
        if (typeof input !== "string") throw new Error("Input must be a string")

        const parser = (options.startRule != null)
          ? grammar[options.startRule]
          : Object.values(grammar)[0]

        if (!parser) throw new Error(`Could not find rule with name '${options.startRule}'`)

        const filename = options.filename || "<anonymous>";

        reset()
        Object.assign(ctx, { ...options.events, tokenize: options.tokenize });

        return validate(input, parser(ctx, {
          input,
          pos: 0,
        }), {
          filename: filename
        })
      }
    }
  }())
"""

mjsExport := """
  export default parser
  export const { parse } = parser
"""
