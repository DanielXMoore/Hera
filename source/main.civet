import type {
  HeraGrammar,
  HeraRules,
  ParserOptions,
} from ./hera-types.civet

import { createRequire } from "module"

* as parser from ./parser.ts
{ compile as heraCompile, type CompilerOptions } from ./compiler.civet
{ grammarToEBNF } from ./util.civet

require := createRequire(import.meta.url)

execMod := (src: string) => {
  m := { exports: {} }
  Function("require", "module", "exports", src)(require, m, m.exports)

  return m.exports
}

compile := (rulesOrString: HeraRules | string, options?: CompilerOptions) =>
  let rules: HeraRules
  if typeof rulesOrString is "string"
    rules = parse(rulesOrString)
    if options
      options.source = rulesOrString
  else
    rules = rulesOrString

  return heraCompile rules, options

parse := parser.parse

generate := <T extends HeraGrammar>(src: string) => {
  return execMod(compile(parse(src))) as {
    parse: (input: string, options?: ParserOptions<T>) => unknown
  }
}

modImport := async <T extends HeraGrammar>(src: string) => {
  fs := await import('node:fs/promises')
  { fileURLToPath, pathToFileURL } := await import "node:url"
  { dirname } := await import "node:path"

  __dirname := dirname fileURLToPath(import.meta.url)

  js := compile(parse(src), {
    module: true,
    libPath: `${ __dirname }/machine.js`,
  })

  // random temp file
  tmpPath := `${ __dirname }/hera-tmp-${ Math.random().toString(36).slice(2) }.mjs`
  await fs.writeFile(tmpPath, js)

  try
    (await import pathToFileURL(tmpPath).href) as {
      parse: (input: string, options?: ParserOptions<T>) => unknown
    }
  finally
    await fs.unlink(tmpPath)
}

export {
  parse
  compile
  execMod
  modImport
  generate
  grammarToEBNF
}

hera := {
  parse
  compile
  generate
}

export default hera
