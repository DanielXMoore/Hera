{ parse } from ./main.civet

import type {
  Handler
  HeraAST
  HeraRules
  StructuralHandling
} from ./hera-types.civet

/**
Convert HeraRules to a Hera source text
*/
decompile := (rules: HeraRules) ->
  Object.keys(rules).map (name) ->
    value := toS rules[name]
    `${name}\n  ${value}\n`
  .join("\n")

structuralToSource := (mapping: StructuralHandling): string ->
  switch typeof mapping
    when "number"
      mapping.toString()
    when "string", "undefined", "boolean"
      JSON.stringify(mapping)
    when "object"
      if mapping is null
        JSON.stringify(mapping)
      else if Array.isArray(mapping)
        "[" + mapping.map (m) ->
          structuralToSource(m)
        .join(", ") + "]"
      else if "v" in mapping
        `$${mapping.v}`
      else if "o" in mapping
        "{" + Object.keys(mapping.o).map (key) ->
          value := mapping.o[key]
          `${key}: ${structuralToSource(value)}`
        .join(", ") + "}"
      else if "l" in mapping
        JSON.stringify(mapping.l)
      else
        throw new Error "Unknown mapping object"
    else
      throw new Error "Unknown mapping type"

/**
handler to source
*/
hToS := (h: Handler | undefined): string ->
  return "" unless h?

  if typeof h is "object" and "f" in h // functional handler
    // Function handler type annotation
    t := "t" in h ? ` :: ${h.t.trim()}` : ""
    // Restore indentation
    `${t} ->\n${h.f.replace(/^|\n/g, "$&    ")}`
  else // structural handler
    " -> " + structuralToSource(h)

/**
Generate a source document from the rules AST

*/
toS := (rule: HeraAST, depth=0): string ->
  if Array.isArray(rule)
    [ , , h] := rule
    switch rule[0]
      when "*", "+", "?"
        toS(rule[1], depth+1) + rule[0] + hToS(h)
      when "$", "&", "!"
        rule[0] + toS(rule[1], depth+1) + hToS(h)
      when "L"
        '"' + rule[1] + '"' + hToS(h)
      when "R"
        v := rule[1]
        if v is "."
          v + hToS(h)
        else
          try
            parse v,
              startRule: "CharacterClassExpression"
            v + hToS(h)
          catch
            '/' + v + '/' + hToS(h)

      when "S"
        terms := rule[1].map (i) ->
          toS i, depth+1

        if depth < 1
          terms.join(" ") + hToS(h)
        else
          "( " + terms.join(" ") + " )"

      when "/"
        {
          terms := rule[1].map (i) ->
            toS i, depth and depth+1

          if depth is 0 and !h
            terms.join("\n  ")
          else
            "( " + terms.join(" / ") + " )" + hToS(h)
        }
      else
        if rule[0] is like { name }
          return toS(rule[1], depth+1) + `:${rule[0].name}${hToS(h)}`
        throw new Error `Unknown rule type: ${JSON.stringify(rule[0])}`
  else // String name of the rule
    rule

grammarToEBNF := (rules: HeraRules): string ->
  Object.keys(rules).map (name) ->
    value := ruleToEBNF rules[name]
    `${name} ::= ${value}`
  .join("\n") + "\n"

quote := (s: string) ->
  if s.match(/"/)
    "'" + s + "'"
  else
    '"' + s + '"'

/**
Convert rule to EBNF-ish format
*/
ruleToEBNF := (rule: HeraAST, depth=0): string ->
  if Array.isArray(rule)
    switch rule[0]
      when "*", "+", "?"
        ruleToEBNF(rule[1], depth+1) + rule[0]
      when "$", "&", "!"
        pre := rule[0] is "$" ? "" : '"' + rule[0] + '" '
        pre + ruleToEBNF(rule[1], depth+1)
      when "L"
        quote rule[1]
      when "R"
        v := rule[1]
        if v is "."
          v
        else
          try
            // throws if it's not a valid character class
            parse v,
              startRule: "CharacterClassExpression"
            quote v
          catch
            quote('/' + v + '/')

      when "S"
        terms := rule[1].map (rule) ->
          ruleToEBNF rule

        "( " + terms.join(" ") + " )"

      when "/"
        terms := rule[1].map (rule) ->
          ruleToEBNF rule

        "( " + terms.join(" | ") + " )"
      else
        if rule[0] is like { name }
          return ruleToEBNF rule[1], depth+1
        throw new Error `Unknown rule type: ${JSON.stringify(rule[0])}`
  else // String name of the rule
    rule

export { decompile, grammarToEBNF }
