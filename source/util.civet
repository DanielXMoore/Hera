{ parse } from ./main.mjs


/**
Convert HeraRules to a Hera source text
@param rules {import("./machine").HeraRules}
*/
decompile := (rules) ->
  Object.keys(rules).map (name) ->
    value := toS rules[name]
    `${name}\n  ${value}\n`
  .join("\n")

export {decompile}

/**
@param mapping {import("./machine").StructuralHandling}
@return {string}
*/
structuralToSource := (mapping): string ->
  switch typeof mapping
    when "number"
      mapping.toString()
    when "string", "undefined", "boolean"
      JSON.stringify(mapping)
    when "object"
      if mapping is null
        JSON.stringify(mapping)
      else if Array.isArray(mapping)
        "[" + mapping.map (m) ->
          structuralToSource(m)
        .join(", ") + "]"
      else if "v" in mapping
        `$${mapping.v}`
      else if "o" in mapping
        "{" + Object.keys(mapping.o).map (key) ->
          value := mapping.o[key]
          `${key}: ${structuralToSource(value)}`
        .join(", ") + "}"
      else if "l" in mapping
        JSON.stringify(mapping.l)
      else
        throw new Error "Unknown mapping object"
    else
      throw new Error "Unknown mapping type"

/**
handler to source
@param h {import("./machine").Handler | undefined}
*/
hToS := (h) ->
  return "" unless h?

  let f = " -> "

  if typeof h is "object" and "f" in h // functional handler
    f += `\n${h.f.replace(/^|\n/g, "$&    ")}`
  else // structural handler
    f += structuralToSource(h)

  return f

/**
Generate a source document from the rules AST

@param rule {import("./machine").HeraAST}
@return {string}
*/
toS := (rule, depth=0) ->
  if Array.isArray(rule)
    [ , , h] := rule
    switch rule[0]
      when "*", "+", "?"
        toS(rule[1], depth+1) + rule[0] + hToS(h)
      when "$", "&", "!"
        rule[0] + toS(rule[1], depth+1) + hToS(h)
      when "L"
        '"' + rule[1] + '"' + hToS(h)
      when "R"
        v := rule[1]
        if v is "."
          v + hToS(h)
        else
          try
            parse v,
              startRule: "CharacterClassExpression"
            v + hToS(h)
          catch
            '/' + v + '/' + hToS(h)

      when "S"
        terms := rule[1].map (i) ->
          toS i, depth+1

        if depth < 1
          terms.join(" ") + hToS(h)
        else
          "( " + terms.join(" ") + " )"

      when "/"
        {
          terms := rule[1].map (i) ->
            toS i, depth and depth+1

          if depth is 0 and !h
            terms.join("\n  ")
          else
            "( " + terms.join(" / ") + " )" + hToS(h)
        }
      else
        throw new Error "Unknown rule type"
  else // String name of the rule
    rule
