{
  "Grammar": [
    "*",
    "Statement",
    {
      "f": "const code = $1.filter(a => typeof a === \"string\")\nconst rules = Object.fromEntries($1.filter(a => Array.isArray(a)))\nrules[Symbol.for(\"code\")] = code\nreturn rules",
      "$loc": {
        "pos": 24,
        "length": 181
      }
    }
  ],
  "Statement": [
    "/",
    [
      [
        "S",
        [
          [
            "?",
            "EOS"
          ],
          "CodeBlock"
        ],
        {
          "v": 2
        }
      ],
      [
        "S",
        [
          [
            "?",
            "EOS"
          ],
          "Rule"
        ],
        {
          "v": 2
        }
      ]
    ]
  ],
  "CodeBlock": [
    "S",
    [
      "TripleBacktick",
      "CodeBody",
      "TripleBacktick"
    ],
    {
      "v": 2
    }
  ],
  "Rule": [
    "S",
    [
      "Name",
      "EOS",
      "RuleBody"
    ],
    [
      {
        "v": 1
      },
      {
        "v": 3
      }
    ]
  ],
  "RuleBody": [
    "+",
    [
      "S",
      [
        "Indent",
        "Choice"
      ]
    ],
    {
      "f": "var r = $1.map((a) => a[1])\nif (r.length === 1) return r[0];\nreturn [\"/\", r]",
      "$loc": {
        "pos": 386,
        "length": 90
      }
    }
  ],
  "Choice": [
    "S",
    [
      "Sequence",
      "Handling"
    ],
    {
      "f": "if ($2 !== undefined) {\n  if (!$1.push)\n    $1 = [\"S\", [$1], $2]\n  else\n    $1.push($2)\n}\nreturn $1",
      "$loc": {
        "pos": 506,
        "length": 129
      }
    }
  ],
  "Sequence": [
    "/",
    [
      [
        "S",
        [
          "Expression",
          [
            "+",
            "SequenceExpression"
          ]
        ],
        {
          "f": "$2.unshift($1)\nreturn [\"S\", $2]",
          "$loc": {
            "pos": 680,
            "length": 40
          }
        }
      ],
      [
        "S",
        [
          "Expression",
          [
            "+",
            "ChoiceExpression"
          ]
        ],
        {
          "f": "$2.unshift($1)\nreturn [\"/\", $2]",
          "$loc": {
            "pos": 754,
            "length": 40
          }
        }
      ],
      "Expression"
    ]
  ],
  "SequenceExpression": [
    "S",
    [
      "Space",
      "Expression"
    ],
    {
      "v": 2
    }
  ],
  "ChoiceExpression": [
    "S",
    [
      "Space",
      [
        "L",
        "/"
      ],
      "Space",
      "Expression"
    ],
    {
      "v": 4
    }
  ],
  "ParameterName": [
    "S",
    [
      [
        "L",
        ":"
      ],
      "Name"
    ],
    {
      "v": 2
    }
  ],
  "Expression": [
    "S",
    [
      [
        "?",
        "PrefixOperator"
      ],
      "Suffix",
      [
        "?",
        "ParameterName"
      ]
    ],
    {
      "f": "var result = null\nif ($1) result = [$1, $2]\nelse result = $2\nif ($3)\n  return [{name: $3}, result]\nreturn result",
      "$loc": {
        "pos": 992,
        "length": 138
      }
    }
  ],
  "PrefixOperator": [
    "R",
    "[$&!]"
  ],
  "Suffix": [
    "S",
    [
      "Primary",
      [
        "?",
        "SuffixOperator"
      ]
    ],
    {
      "f": "if ($2) return [$2, $1]\nelse return $1",
      "$loc": {
        "pos": 1190,
        "length": 48
      }
    }
  ],
  "SuffixOperator": [
    "R",
    "[+?*]"
  ],
  "Primary": [
    "/",
    [
      "Name",
      "Literal",
      [
        "S",
        [
          "OpenParenthesis",
          "Sequence",
          "CloseParenthesis"
        ],
        {
          "v": 2
        }
      ]
    ]
  ],
  "Literal": [
    "/",
    [
      "StringLiteral",
      "RegExpLiteral"
    ]
  ],
  "Handling": [
    "/",
    [
      [
        "S",
        [
          "EOS"
        ],
        {
          "f": "return undefined",
          "$loc": {
            "pos": 1397,
            "length": 21
          }
        }
      ],
      [
        "S",
        [
          [
            "*",
            "Space"
          ],
          [
            "?",
            "TypeAnnotation"
          ],
          "Arrow",
          "HandlingExpression"
        ],
        {
          "f": "if ($2) exp.t = $2\nreturn $4",
          "$loc": {
            "pos": 1471,
            "length": 38
          }
        }
      ]
    ]
  ],
  "HandlingExpression": [
    "/",
    [
      [
        "S",
        [
          "EOS",
          "HandlingExpressionBody",
          [
            "?",
            "EOS"
          ]
        ],
        {
          "v": 2
        }
      ],
      [
        "S",
        [
          "StructuralMapping",
          "EOS"
        ],
        {
          "v": 1
        }
      ]
    ]
  ],
  "HandlingExpressionBody": [
    "+",
    "HandlingExpressionLine",
    {
      "f": "return {\n  f: $1.join(\"\").trimEnd(),\n  $loc,\n}",
      "$loc": {
        "pos": 1651,
        "length": 64
      }
    }
  ],
  "HandlingExpressionLine": [
    "S",
    [
      "Indent",
      "Indent",
      [
        "$",
        [
          "S",
          [
            [
              "R",
              "[^\\n\\r]*"
            ],
            "NonCommentEOS"
          ]
        ]
      ]
    ],
    {
      "v": 3
    }
  ],
  "StructuralMapping": [
    "/",
    [
      [
        "S",
        [
          "StringValue"
        ],
        {
          "f": "return JSON.parse(`\"${$1}\"`)",
          "$loc": {
            "pos": 1824,
            "length": 33
          }
        }
      ],
      "NumberValue",
      "BooleanValue",
      "NullValue",
      [
        "S",
        [
          "Variable"
        ],
        {
          "o": {
            "v": {
              "v": 1
            }
          }
        }
      ],
      "JSArray",
      "JSObject"
    ]
  ],
  "JSArray": [
    "S",
    [
      "OpenBracket",
      [
        "*",
        "ArrayItem"
      ],
      "CloseBracket"
    ],
    {
      "v": 2
    }
  ],
  "ArrayItem": [
    "S",
    [
      "StructuralMapping",
      [
        "R",
        ",\\s*|\\s*(?=\\])"
      ]
    ],
    {
      "v": 1
    }
  ],
  "JSObject": [
    "S",
    [
      "OpenBrace",
      [
        "*",
        "ObjectField"
      ],
      "CloseBrace"
    ],
    {
      "f": "return {\n  o: Object.fromEntries($2)\n}",
      "$loc": {
        "pos": 2097,
        "length": 52
      }
    }
  ],
  "ObjectField": [
    "/",
    [
      [
        "S",
        [
          [
            "/",
            [
              "StringValue",
              "Name"
            ]
          ],
          [
            "R",
            ":[ \\t]*"
          ],
          "StructuralMapping",
          [
            "R",
            ",\\s*|\\s*(?=\\})"
          ]
        ],
        [
          {
            "v": 1
          },
          {
            "v": 3
          }
        ]
      ],
      [
        "S",
        [
          "Name",
          [
            "R",
            ",\\s*|\\s*(?=\\})"
          ]
        ],
        [
          {
            "v": 1
          },
          {
            "o": {
              "v": {
                "v": 1
              }
            }
          }
        ]
      ]
    ]
  ],
  "Variable": [
    "/",
    [
      [
        "R",
        "\\$(\\d)",
        {
          "f": "return parseInt($1, 10)",
          "$loc": {
            "pos": 2308,
            "length": 28
          }
        }
      ],
      "Name"
    ]
  ],
  "BooleanValue": [
    "/",
    [
      [
        "L",
        "true",
        true
      ],
      [
        "L",
        "false",
        false
      ]
    ]
  ],
  "NullValue": [
    "/",
    [
      [
        "L",
        "null",
        {
          "f": "return null",
          "$loc": {
            "pos": 2416,
            "length": 16
          }
        }
      ],
      [
        "L",
        "undefined",
        {
          "f": "return {l: undefined}",
          "$loc": {
            "pos": 2449,
            "length": 27
          }
        }
      ]
    ]
  ],
  "NumberValue": [
    "/",
    [
      [
        "R",
        "0x[\\da-fA-F]+",
        {
          "f": "return parseInt($0, 16)",
          "$loc": {
            "pos": 2509,
            "length": 28
          }
        }
      ],
      [
        "R",
        "[-+]?\\d+(\\.\\d+)?",
        {
          "f": "return parseFloat($0)",
          "$loc": {
            "pos": 2561,
            "length": 27
          }
        }
      ]
    ]
  ],
  "StringValue": [
    "S",
    [
      [
        "L",
        "\\\""
      ],
      [
        "$",
        [
          "*",
          "DoubleStringCharacter"
        ]
      ],
      [
        "L",
        "\\\""
      ]
    ],
    {
      "v": 2
    }
  ],
  "DoubleStringCharacter": [
    "/",
    [
      [
        "R",
        "[^\"\\\\]+"
      ],
      "EscapeSequence"
    ]
  ],
  "EscapeSequence": [
    "$",
    [
      "S",
      [
        "Backslash",
        [
          "R",
          "."
        ]
      ]
    ]
  ],
  "StringLiteral": [
    "S",
    [
      "StringValue"
    ],
    [
      "L",
      {
        "v": 1
      }
    ]
  ],
  "RegExpLiteral": [
    "/",
    [
      [
        "S",
        [
          [
            "L",
            "/"
          ],
          [
            "!",
            "Space"
          ],
          [
            "$",
            [
              "*",
              "RegExpCharacter"
            ]
          ],
          [
            "L",
            "/"
          ]
        ],
        [
          "R",
          {
            "v": 3
          }
        ]
      ],
      [
        "$",
        "CharacterClassExpression",
        [
          "R",
          {
            "v": 1
          }
        ]
      ],
      [
        "L",
        ".",
        [
          "R",
          {
            "v": 1
          }
        ]
      ]
    ]
  ],
  "CharacterClassExpression": [
    "+",
    "CharacterClass"
  ],
  "RegExpCharacter": [
    "/",
    [
      [
        "R",
        "[^\\/\\\\]+"
      ],
      "EscapeSequence"
    ]
  ],
  "CharacterClass": [
    "S",
    [
      [
        "L",
        "["
      ],
      [
        "*",
        "CharacterClassCharacter"
      ],
      [
        "L",
        "]"
      ],
      [
        "?",
        "Quantifier"
      ]
    ]
  ],
  "CharacterClassCharacter": [
    "/",
    [
      [
        "R",
        "[^\\]\\\\]+"
      ],
      "EscapeSequence"
    ]
  ],
  "Quantifier": [
    "R",
    "[?+*]|\\{\\d+(,\\d+)?\\}"
  ],
  "Name": [
    "R",
    "[_a-zA-Z][_a-zA-Z0-9]*"
  ],
  "Arrow": [
    "S",
    [
      [
        "L",
        "->"
      ],
      [
        "*",
        "Space"
      ]
    ]
  ],
  "Backslash": [
    "L",
    "\\\\"
  ],
  "OpenBrace": [
    "R",
    "\\{\\s*"
  ],
  "CloseBrace": [
    "R",
    "\\}[ \\t]*"
  ],
  "OpenBracket": [
    "R",
    "\\[\\s*"
  ],
  "CloseBracket": [
    "R",
    "\\][ \\t]*"
  ],
  "OpenParenthesis": [
    "R",
    "\\([ \\t]*"
  ],
  "CloseParenthesis": [
    "R",
    "[ \\t]*\\)"
  ],
  "Indent": [
    "L",
    "  "
  ],
  "Space": [
    "R",
    "[ \\t]+"
  ],
  "NonCommentEOS": [
    "R",
    "([ \\t]*(\\n|\\r\\n|\\r|$))+"
  ],
  "EOS": [
    "R",
    "([ \\t]*(#[^\\n\\r]*)?(\\n|\\r\\n|\\r|$))+"
  ],
  "TripleBacktick": [
    "L",
    "```"
  ],
  "TypeAnnotation": [
    "S",
    [
      [
        "L",
        "::"
      ],
      [
        "$",
        [
          "R",
          "(?:(?!->).)*"
        ]
      ]
    ],
    {
      "v": 2
    }
  ],
  "CodeBody": [
    "$",
    [
      "R",
      "(?:(?:`(?!``))|[^`])*"
    ]
  ]
}